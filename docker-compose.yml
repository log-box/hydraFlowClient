version: "3.9"

services:

  postgres:
    image: postgres:15
    container_name: hydra-postgres
    environment:
      POSTGRES_USER: hydra
      POSTGRES_PASSWORD: hydra_pass123
      POSTGRES_DB: hydra
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  hydra-migrate:
    image: oryd/hydra:v2.2
    depends_on:
      - postgres
    environment:
      - DSN=postgres://hydra:hydra_pass123@postgres:5432/hydra?sslmode=disable
    command: migrate sql -e --yes
    restart: "no"

  hydra:
    image: oryd/hydra:v2.2
    container_name: hydra
    depends_on:
      - hydra-migrate
    environment:
      - DSN=postgres://hydra:hydra_pass123@postgres:5432/hydra?sslmode=disable
    volumes:
      - ./hydra/config:/etc/hydra
    command: serve all --dev -c /etc/hydra/hydra.yml
    ports:
      - "4444:4444"
      - "4445:4445"
    restart: unless-stopped

  hydra-init:
    image: python:3.11-alpine
    container_name: hydra-init
    depends_on:
      - hydra
    user: root
    volumes:
      - ./init:/init
      - ./app:/app
    working_dir: /init
    entrypoint: >
      sh -c "
        apk add --no-cache curl &&
        until curl -s http://hydra:4445/health/ready | grep '\"status\":\"ok\"'; do
          echo 'Ожидание Hydra...'; sleep 1;
        done &&
        python createClients.py
      "
    restart: "no"


  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hydra-flow-client
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs

    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 3000 --reload --log-level debug
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - hydra
    restart: unless-stopped
    user: "${UID}:${GID}"

volumes:
  pgdata:
